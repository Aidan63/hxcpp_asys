package net;

import haxe.Exception;
import haxe.exceptions.ArgumentException;
import asys.native.net.Server;
import utest.Assert;
import utest.Async;
import utest.Test;

class ServerOpenTests extends Test
{
    final address : String;
    final port : Int;

    public function new() {
        super();

        address = "127.0.0.1";
        port    = 7000;
    }

    function test_net_open(async:Async) {
        Server.open(Net(address, port), null, (server, error) -> {
            Assert.isNull(error);

            if (Assert.notNull(server)) {
                server.close((_, error) -> {
                    Assert.isNull(error);

                    async.done();
                });
            } else {
                async.done();
            }
        });
    }

    function test_null_callback() {
        Assert.raises(() -> Server.open(Net(address, port), null, null), ArgumentException);
    }

    function test_null_address(async:Async) {
        Server.open(null, null, (server, error) -> {
            if (Assert.isOfType(error, ArgumentException)) {
                Assert.equals("address", (cast error:ArgumentException).argument);
            }

            if (Assert.isNull(server)) {
                async.done();
            } else {
                server.close((_, error) -> {
                    Assert.isNull(error);

                    async.done();
                });
            }
        });
    }

    function test_null_host(async:Async) {
        Server.open(Net(null, port), null, (server, error) -> {
            if (Assert.isOfType(error, ArgumentException)) {
                Assert.equals("host", (cast error:ArgumentException).argument);
            }

            if (Assert.isNull(server)) {
                async.done();
            } else {
                server.close((_, error) -> {
                    Assert.isNull(error);

                    async.done();
                });
            }
        });
    }

    function test_null_path(async:Async) {
        Server.open(Ipc(null), null, (server, error) -> {
            if (Assert.isOfType(error, ArgumentException)) {
                Assert.equals("path", (cast error:ArgumentException).argument);
            }

            if (Assert.isNull(server)) {
                async.done();
            } else {
                server.close((_, error) -> {
                    Assert.isNull(error);

                    async.done();
                });
            }
        });
    }

    function test_invalid_host(async:Async) {
        Server.open(Net("not_a_host", port), null, (server, error) -> {
            Assert.isOfType(error, Exception);

            if (Assert.isNull(server)) {
                async.done();
            } else {
                server.close((_, error) -> {
                    Assert.isNull(error);

                    async.done();
                });
            }
        });
    }

    function test_default_keep_alive(async:Async) {
        Server.open(Net(address, port), null, (server, error) -> {
            Assert.isNull(error);

            if (Assert.notNull(server)) {
                server.getOption(KeepAlive, (enabled, error) -> {
                    Assert.isNull(error);
                    Assert.isTrue(enabled);

                    server.close((_, error) -> {
                        Assert.isNull(error);
    
                        async.done();
                    });
                });
            }
        });
    }

    function test_default_send_buffer_size(async:Async) {
        Server.open(Net(address, port), null, (server, error) -> {
            Assert.isNull(error);

            if (Assert.notNull(server)) {
                server.getOption(SendBuffer, (size, error) -> {
                    Assert.isNull(error);
                    Assert.isTrue(size > 0);

                    server.close((_, error) -> {
                        Assert.isNull(error);
    
                        async.done();
                    });
                });
            }
        });
    }

    function test_default_receive_buffer_size(async:Async) {
        Server.open(Net(address, port), null, (server, error) -> {
            Assert.isNull(error);

            if (Assert.notNull(server)) {
                server.getOption(ReceiveBuffer, (size, error) -> {
                    Assert.isNull(error);
                    Assert.isTrue(size > 0);

                    server.close((_, error) -> {
                        Assert.isNull(error);
    
                        async.done();
                    });
                });
            }
        });
    }

    function test_custom_keep_alive(async:Async) {
        final expected = false;

        Server.open(Net(address, port), { keepAlive: expected }, (server, error) -> {
            Assert.isNull(error);

            if (Assert.notNull(server)) {
                server.getOption(KeepAlive, (enabled, error) -> {
                    Assert.isNull(error);
                    Assert.equals(expected, enabled);

                    server.close((_, error) -> {
                        Assert.isNull(error);
    
                        async.done();
                    });
                });
            }
        });
    }

    function test_custom_send_buffer_size(async:Async) {
        final expected = 7000;

        Server.open(Net(address, port), { sendBuffer: expected }, (server, error) -> {
            Assert.isNull(error);

            if (Assert.notNull(server)) {
                server.getOption(SendBuffer, (size, error) -> {
                    Assert.isNull(error);
                    Assert.equals(expected, size);

                    server.close((_, error) -> {
                        Assert.isNull(error);
    
                        async.done();
                    });
                });
            }
        });
    }

    function test_custom_receive_buffer_size(async:Async) {
        final expected = 7000;

        Server.open(Net(address, port), { receiveBuffer: expected }, (server, error) -> {
            Assert.isNull(error);

            if (Assert.notNull(server)) {
                server.getOption(ReceiveBuffer, (size, error) -> {
                    Assert.isNull(error);
                    Assert.equals(expected, size);

                    server.close((_, error) -> {
                        Assert.isNull(error);
    
                        async.done();
                    });
                });
            }
        });
    }

    function test_get_option_null_callback(async:Async) {
        Server.open(Net(address, port), null, (server, error) -> {
            Assert.isNull(error);

            if (Assert.notNull(server)) {
                Assert.raises(() -> server.getOption(ReceiveBuffer, null), ArgumentException);

                server.close((_, error) -> {
                    Assert.isNull(error);

                    async.done();
                });
            }
        });
    }

    function test_set_option_null_callback(async:Async) {
        Server.open(Net(address, port), null, (server, error) -> {
            Assert.isNull(error);

            if (Assert.notNull(server)) {
                Assert.raises(() -> server.setOption(ReceiveBuffer, 0, null), ArgumentException);

                server.close((_, error) -> {
                    Assert.isNull(error);

                    async.done();
                });
            }
        });
    }

    function test_get_option_invalid_type(async:Async) {
        Server.open(Net(address, port), null, (server, error) -> {
            Assert.isNull(error);

            if (Assert.notNull(server)) {
                server.getOption(cast -100, (_, error) -> {
                    Assert.isOfType(error, Exception);

                    server.close((_, error) -> {
                        Assert.isNull(error);
    
                        async.done();
                    });
                });
            }
        });
    }

    function test_set_option_invalid_type(async:Async) {
        Server.open(Net(address, port), null, (server, error) -> {
            Assert.isNull(error);

            if (Assert.notNull(server)) {
                server.setOption(cast -100, null, (_, error) -> {
                    Assert.isOfType(error, Exception);

                    server.close((_, error) -> {
                        Assert.isNull(error);
    
                        async.done();
                    });
                });
            }
        });
    }

    function test_close_null_callback(async:Async) {
        Server.open(Net(address, port), null, (server, error) -> {
            Assert.isNull(error);

            if (Assert.notNull(server)) {
                Assert.raises(() -> server.close(null), ArgumentException);

                server.close((_, error) -> {
                    Assert.isNull(error);

                    async.done();
                });
            }
        });
    }

    function test_zero_backlog(async:Async) {
        Server.open(Net(address, port), { backlog: 0 }, (server, error) -> {
            if (Assert.isOfType(error, ArgumentException)) {
                Assert.equals("backlog", (cast error : ArgumentException).argument);
            }

            if (Assert.isNull(server)) {
                async.done();
            } else {
                server.close((_, error) -> {
                    Assert.isNull(error);

                    async.done();
                });
            }
        });
    }
}